- name: Connect to Pulumi created EC2 instance and install MySQL
  hosts: localhost
  vars:
    keypair_name: pulumi_key
    keypair_path: ".ec2ssh//{{ keypair_name }}"
    # this is really important to configure, since Ansible will use this user for SSH connection
    ssh_user: ubuntu
  tasks:
    - name: Gather Pulumi created EC2 instance public IP
      shell: cat .ec2ssh/db_public_DNS
      register: pulumi_stack_output

    - name: Gather DB invest Password
      shell: cat .ec2ssh/db_invest_passwd
      register: db_invest_passwd

    - set_fact:
        ec2_public_dns: "{{ pulumi_stack_output.stdout }}"
        db_invest_passwd: "{{ db_invest_passwd.stdout }}"

    - debug:
        msg: "The public IP of the Pulumi created EC2 instance is: {{ ec2_public_dns }}"

    - name: Wait 300 seconds for port 22 to become open and contain "SSH" - then the SSH connection should work afterwards
      wait_for:
        port: 22
        host: "{{ ec2_public_dns }}"
        search_regex: SSH
        delay: 10
        timeout: 320

    - name: Gather facts of Pulumi created EC2 instance for later role execution
      setup:
      delegate_to: "{{ ec2_public_dns }}"
      vars:
        ansible_ssh_private_key_file: "{{ keypair_path }}"
        ansible_user: ubuntu

    - name: Update repositories cache and install "ec2-instance-connect" package for access by aws web console
      delegate_to: '{{ ec2_public_dns }}'
      become: true
      apt:
        name: ec2-instance-connect
        update_cache: yes

    - name: Now use the ansible-galaxy prepared postgresql role to install PostgreSQL on our EC2 instance
      import_role:
        name: postgresql
      delegate_to: '{{ ec2_public_dns }}'
      become: true
      vars:
        ansible_ssh_private_key_file: "{{ keypair_path }}"
        ansible_user: ubuntu
        postgresql_user: postgres
        postgresql_group: postgres
        postgresql_global_config_options:
          - option: listen_addresses
            value: "*"
        postgresql_hba_entries:
          - { type: local, database: all, user: postgres, auth_method: peer }
          - { type: host, database: all, user: postgres, address: '172.31.0.0/16', auth_method: trust }
          - { type: local, database: invest, user: invest, auth_method: trust }
          - { type: host, database: invest, user: invest, address: '0.0.0.0/0', auth_method: password }
        postgresql_databases:
          - name: invest
        postgresql_users:
          - name: invest
            password: "{{ db_invest_passwd }}"
            db: invest